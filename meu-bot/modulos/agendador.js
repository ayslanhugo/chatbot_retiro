// modulos/agendador.js (Vers√£o Final com Lembretes do Grupo de Ora√ß√£o)

const fs = require('fs');
const moment = require('moment-timezone');
const { MessageMedia } = require('whatsapp-web.js');
const config = require('../config.js');
const { getInscritos } = require('./googleServices.js');

// --- Fun√ß√µes de Controlo de Estado ---
function lerEstadoLembretes() {
    try {
        if (fs.existsSync('./estado_lembretes.json')) {
            const data = fs.readFileSync('./estado_lembretes.json');
            return JSON.parse(data);
        }
    } catch (error) { console.error('Erro ao ler o estado dos lembretes:', error); }
    return {};
}

function salvarEstadoLembretes(estado) {
    try {
        fs.writeFileSync('./estado_lembretes.json', JSON.stringify(estado, null, 2));
    } catch (error) { console.error('Erro ao salvar o estado dos lembretes:', error); }
}

function lerLeads() {
    try {
        if (fs.existsSync('./leads.json')) {
            const data = fs.readFileSync('./leads.json');
            return JSON.parse(data);
        }
    } catch (error) { console.error('Erro ao ler o arquivo de leads:', error); }
    return {};
}

function salvarLeads(leads) {
    try {
        fs.writeFileSync('./leads.json', JSON.stringify(leads, null, 2));
    } catch (error) { console.error('Erro ao salvar o arquivo de leads:', error); }
}

// --- Fun√ß√£o Principal que Inicia os Agendadores ---
function iniciarAgendadores(client) {
    
    // 1. AGENDADOR DE DIVULGA√á√ÉO EM GRUPO
    console.log('[AGENDADOR] Iniciando agendador de mensagens de divulga√ß√£o.');
const mensagensGerais = [
    // --- MENSAGENS APRIMORADAS COM QUEBRAS DE LINHA ---
    "Paz e bem! üôè\nJ√° pensou em um fim de semana para renovar sua f√©, fazer amizades incr√≠veis e viver algo transformador com Deus? üíõ\nEsse √© o nosso *Retiro Kerigm√°tico*!\nInscri√ß√µes abertas ‚Äî fale comigo no privado e descubra como participar.",

    "Sente que Deus est√° te chamando para algo novo? ‚ú®\nO *Retiro Kerigm√°tico do JCC* √© esse lugar de pausa, reencontro e renova√ß√£o.\nVoc√™ n√£o est√° aqui por acaso‚Ä¶ vem com a gente viver essa experi√™ncia √∫nica!",

    "üé∂ Louvor, ora√ß√£o, amizade e momentos que marcam para sempre!\nNosso retiro est√° chegando, e as vagas est√£o voando!\nGaranta j√° a sua e venha viver um fim de semana com Deus como voc√™ nunca viveu.",

    `üóì J√° marcou a√≠?\nO Retiro ser√° nos dias 22, 23 e 24 de agosto!\nO investimento √© de apenas R$${config.VALOR_INSCRICAO} e o pagamento pode ser feito via PIX.\nQuer saber mais? S√≥ me chamar!`,

    "‚úùÔ∏è √Äs vezes, tudo o que a alma precisa √© de sil√™ncio e presen√ßa.\nO *Retiro Kerigm√°tico do JCC* √© esse respiro ‚Äî um encontro profundo com Deus.\nInscri√ß√µes abertas. Venha dar esse passo!",

    "üë• Quer conhecer pessoas que compartilham da mesma f√©?\nO retiro √© lugar de partilha, comunh√£o e amizade verdadeira.\nChama um amigo e venham juntos viver essa alegria!",

    "ü§î \"Ser√° que esse retiro √© para mim?\"\nSim, √© pra voc√™ que quer algo novo, verdadeiro e profundo com Deus.\nSeja qual for sua caminhada, sua vaga est√° aqui.\nD√™ o primeiro passo!",

    "üî• Prega√ß√µes que tocam, ora√ß√µes que renovam e louvores que nos elevam!\nO *Retiro Kerigm√°tico* √© uma viv√™ncia completa de f√©.\nVoc√™ n√£o vai sair o mesmo.\nJ√° fez sua inscri√ß√£o?",

    "‚è∏Ô∏è Na correria da vida, que tal apertar o ‚Äúpause‚Äù?\nO *Retiro JCC* √© esse tempo de respiro, sil√™ncio e reconex√£o.\nD√™ espa√ßo para o que realmente importa.\nEstamos te esperando!",

    "‚ù§Ô∏è‚Äçüî• Voc√™ j√° ouviu falar do *Kerigma*?\n√â o primeiro e mais poderoso an√∫ncio do amor de Deus.\nNosso retiro √© centrado nessa verdade que transforma vidas.\nQuer experimentar?\nAs inscri√ß√µes est√£o abertas!",

    "üåø Est√° procurando paz, respostas ou um novo recome√ßo?\nTalvez o que voc√™ procura esteja nesse final de semana com Deus.\nO *Retiro Kerigm√°tico* √© um convite ao encontro.\nTopa?",

    "‚ùÑÔ∏è A gente sabe: dar o primeiro passo d√° medo.\nMas prometemos que voc√™ ser√° acolhido com carinho e alegria.\nD√™ esse \"sim\" e deixe Deus surpreender voc√™. ü§ó",

    "‚ö°Ô∏è Um retiro feito por jovens e para jovens!\nCheio de energia, verdade e f√© vivida de forma aut√™ntica.\nSe √© isso que voc√™ busca, o seu lugar √© com a gente.\nBora?",

    "üí∏ N√£o √© um gasto. √â um investimento na sua vida com Deus.\nUm fim de semana que pode transformar seu cora√ß√£o e renovar seus dias.\nE o melhor? Com valor acess√≠vel.\nVamos juntos?"
];


    const mensagensDeUrgencia = [
        "‚ö†Ô∏è ATEN√á√ÉO! O tempo est√° voando e as vagas para o nosso retiro est√£o diminuindo! N√£o deixe para a √∫ltima hora. O prazo para se inscrever √© at√© 18 de agosto. Garanta j√° o seu lugar!",
        "Contagem regressiva para o fim das inscri√ß√µes!\n üî• Voc√™ n√£o vai querer correr o risco de ficar de fora, n√£o √©? O seu 'sim' pode transformar o seu final de semana. #VagasLimitadas #RetiroJCC",
    ];
    const mensagensDeAquecimento = [
        "√â ESSA SEMANA!\nüò± √â isso mesmo! Daqui a poucos dias estaremos juntos para viver o nosso t√£o esperado retiro. J√° come√ßou a arrumar a mala e o cora√ß√£o?",
        "Apenas alguns dias nos separam de uma experi√™ncia que vai marcar a sua vida.\nA equipe est√° em ora√ß√£o por cada um de voc√™s. Que venha o Retiro Kerigm√°tico! üôå",
    ];
// A NOVA VERS√ÉO CORRIGIDA

    const HORAS_DE_ENVIO = [9, 13, 20, 3]; // Hor√°rios que voc√™ ajustou
    const intervaloDeVerificacao = 1000 * 60 * 1;

    setInterval(() => {
        const dataAtual = moment().tz("America/Bahia");
        const horaAtual = dataAtual.hour();

        const estado = lerEstadoLembretes();
        // Removemos a declara√ß√£o duplicada daqui e usamos a do arquivo de estado
        const ultimaHoraDeEnvio = estado.ultima_hora_grupo || -1; 

        if (HORAS_DE_ENVIO.includes(horaAtual) && horaAtual !== ultimaHoraDeEnvio) {
            
            console.log(`[AGENDADOR] Hora de envio (${horaAtual}h) detectada! Preparando mensagem.`);
            
            const dataLimiteInscricao = moment(config.DATA_LIMITE_INSCRICAO, 'YYYY-MM-DD');
            const dataRetiro = moment(config.DATA_RETIRO, 'YYYY-MM-DD');
            let listaDeMensagensParaUsar = [];
            if (dataAtual.isAfter(dataRetiro)) { return; }
            if (dataAtual.isAfter(dataLimiteInscricao)) {
                listaDeMensagensParaUsar = mensagensDeAquecimento;
            } else if (dataLimiteInscricao.diff(dataAtual, 'days') <= 7) {
                listaDeMensagensParaUsar = mensagensDeUrgencia;
            } else {
                listaDeMensagensParaUsar = mensagensGerais;
            }
            if (listaDeMensagensParaUsar.length === 0) { return; }
            const mensagemAleatoria = listaDeMensagensParaUsar[Math.floor(Math.random() * listaDeMensagensParaUsar.length)];
            if (!config.GRUPOS_DIVULGACAO_IDS || config.GRUPOS_DIVULGACAO_IDS.length === 0) { return; }
            
            for (const grupoId of config.GRUPOS_DIVULGACAO_IDS) {
                // Ajustado para o novo hor√°rio de envio da arte (9h)
                if (horaAtual === 9) {
                    try {
                        const media = MessageMedia.fromFilePath('./arte-retiro.jpeg');
                        client.sendMessage(grupoId, media, { caption: mensagemAleatoria });
                    } catch (e) { client.sendMessage(grupoId, mensagemAleatoria); }
                } else {
                    client.sendMessage(grupoId, mensagemAleatoria);
                }
            }

            // AP√ìS ENVIAR, ATUALIZA O ARQUIVO DE ESTADO
            console.log(`[AGENDADOR] Mensagem enviada √†s ${horaAtual}h. Atualizando estado permanente.`);
            estado.ultima_hora_grupo = horaAtual;
            salvarEstadoLembretes(estado);
        }
    }, intervaloDeVerificacao);
    
    // 2. AGENDADOR DE LEMBRETES PARA INSCRITOS
    const intervaloLembretes = 1000 * 60 * 60 * 4;
    setInterval(async () => {
        const hoje = moment().tz("America/Bahia");
        const dataRetiro = moment(config.DATA_RETIRO, 'YYYY-MM-DD');
        const diasRestantes = dataRetiro.diff(hoje, 'days');
        let chaveDoLembrete = null;
        switch (diasRestantes) {
            case 7: chaveDoLembrete = 'lembrete_7_dias'; break;
            case 3: chaveDoLembrete = 'lembrete_3_dias'; break;
            case 1: chaveDoLembrete = 'lembrete_1_dia'; break;
            case 0: chaveDoLembrete = 'lembrete_dia_0'; break;
        }
        if (!chaveDoLembrete) { return; }
        const estado = lerEstadoLembretes();
        if (estado[chaveDoLembrete]) { return; }
        console.log(`[LEMBRETES] INICIANDO ENVIO para '${chaveDoLembrete}'!`);
        const inscritos = await getInscritos();
        if (inscritos && inscritos.length > 0) {
            for (const inscrito of inscritos) {
                try {
                    const mensagem = {
                        lembrete_7_dias: (nome) => `Paz e bem, ${nome}! üôè Falta exatamente 1 SEMANA para o nosso retiro!`,
                        lembrete_3_dias: (nome) => `Ol√°, ${nome}! üî• Faltam apenas 3 DIAS para o nosso encontro.`,
                        lembrete_1_dia: (nome) => `√â AMANH√É, ${nome}! üò± Que alegria! Estamos nos √∫ltimos preparativos.`,
                        lembrete_dia_0: (nome) => `√â HOJE, ${nome}! üôå Chegou o grande dia!`
                    }[chaveDoLembrete](inscrito.nome);
                    await client.sendMessage(inscrito.numero, mensagem);
                    await new Promise(resolve => setTimeout(resolve, Math.random() * 3000 + 2000));
                } catch (err) { console.error(`- Falha ao enviar lembrete para ${inscrito.numero}: ${err.message}`); }
            }
            estado[chaveDoLembrete] = true;
            salvarEstadoLembretes(estado);
            console.log(`[LEMBRETES] Finalizado o envio de '${chaveDoLembrete}'. Estado salvo.`);
        }
    }, intervaloLembretes);

    // 3. AGENDADOR DE REPESCAGEM (FOLLOW-UP) DE LEADS
    const intervaloLancamento = 1000 * 60 * 60 * 2;
    const HORAS_LIMITE_FOLLOWUP = 48;
    const mensagemDeFollowUp = (nome) => `Ol√°, ${nome}! Paz e bem! üôè Vi que voc√™ demonstrou interesse no nosso Retiro JCC h√° uns dias. S√≥ estou a passar para saber se ficou com alguma d√∫vida ou se precisa de ajuda para finalizar a sua inscri√ß√£o. As vagas s√£o limitadas e gostar√≠amos muito de ter voc√™ connosco! ‚ú® Se precisar de algo, √© s√≥ responder a esta mensagem.`;
    setInterval(async () => {
        const agora = moment().tz("America/Bahia");
        const leads = lerLeads();
        let leadsAtualizado = false;
        const inscritos = await getInscritos();
        if (!inscritos) { return; }
        const numerosInscritos = new Set(inscritos.map(i => i.numero));
        for (const leadId of Object.keys(leads)) {
            const lead = leads[leadId];
            if (numerosInscritos.has(leadId)) {
                delete leads[leadId];
                leadsAtualizado = true;
                continue;
            }
            if (!lead.followUpSent) {
                const ultimaInteracao = moment(lead.lastInteraction);
                const horasDesdeInteracao = agora.diff(ultimaInteracao, 'hours');
                if (horasDesdeInteracao >= HORAS_LIMITE_FOLLOWUP) {
                    try {
                        const mensagem = mensagemDeFollowUp(lead.nome);
                        await client.sendMessage(leadId, mensagem);
                        lead.followUpSent = true;
                        leadsAtualizado = true;
                        await new Promise(resolve => setTimeout(resolve, Math.random() * 4000 + 3000));
                    } catch (err) { console.error(`- Falha ao enviar follow-up para ${lead.nome}: ${err.message}`); }
                }
            }
        }
        if (leadsAtualizado) {
            salvarLeads(leads);
        }
    }, intervaloLancamento);

    // =============================================================
    //      4. NOVO: AGENDADOR DE LEMBRETE DO GRUPO DE ORA√á√ÉO
    // =============================================================
    const intervaloGrupoOracao = 1000 * 60 * 60; // Verifica a cada hora
    setInterval(() => {
        const agora = moment().tz("America/Bahia");
        const diaDaSemana = agora.day();
        const horaAtual = agora.hour();
        if (!((diaDaSemana === 0 && horaAtual >= 9) || (diaDaSemana === 1 && horaAtual < 18))) {
            return;
        }
        const dataRetiro = moment(config.DATA_RETIRO, 'YYYY-MM-DD');
        const segundasDoTriduo = [
            dataRetiro.clone().subtract(1, 'weeks').startOf('isoWeek'),
            dataRetiro.clone().subtract(2, 'weeks').startOf('isoWeek'),
            dataRetiro.clone().subtract(3, 'weeks').startOf('isoWeek')
        ];
        const hojeEhSemanaDeTriduo = segundasDoTriduo.some(d => d.isSame(agora.clone().startOf('isoWeek')));
        let mensagem;
        let chaveLembrete = `lembrete_grupo_${agora.format('YYYY-MM-DD')}`;
        if (diaDaSemana === 0) {
            if (hojeEhSemanaDeTriduo) {
                mensagem = "Paz e bem, pessoal! üôè Passando para lembrar que AMANH√É, segunda-feira, temos um encontro muito especial: a nossa noite do Tr√≠duo de prepara√ß√£o para o Retiro Kerigm√°tico! üî• N√£o falte, vai ser uma b√™n√ß√£o. √Äs 19h30, no sal√£o da paz!";
            } else {
                mensagem = "Paz e bem, pessoal! üôè Lembran√ßa especial: AMANH√É √© dia do nosso Grupo de Ora√ß√£o JCC! Uma semana aben√ßoada come√ßa com Jesus. Esperamos por voc√™s √†s 19h30 no sal√£o da paz!";
            }
        } else if (diaDaSemana === 1) {
            if (hojeEhSemanaDeTriduo) {
                mensagem = "√â HOJE! üî• Nossa noite do Tr√≠duo de prepara√ß√£o para o Retiro Kerigm√°tico √© hoje √† noite! Venha com o cora√ß√£o aberto para receber tudo o que Deus preparou. Nos vemos √†s 19h30 no sal√£o da paz!";
            } else {
                mensagem = "√â HOJE! üôå O dia mais esperado da semana chegou! Nosso Grupo de Ora√ß√£o JCC acontece hoje √† noite, √†s 19h30. Chame um amigo e venha rezar connosco!";
            }
        }
        if (!mensagem) { return; }
        const estado = lerEstadoLembretes();
        if (estado[chaveLembrete]) {
            return;
        }
        console.log(`[GRUPO DE ORA√á√ÉO] Enviando lembrete: ${chaveLembrete}`);
        if (config.GRUPOS_DIVULGACAO_IDS && config.GRUPOS_DIVULGACAO_IDS.length > 0) {
            for (const grupoId of config.GRUPOS_DIVULGACAO_IDS) {
                client.sendMessage(grupoId, mensagem);
            }
            estado[chaveLembrete] = true;
            salvarEstadoLembretes(estado);
        }
    }, intervaloGrupoOracao);
}

module.exports = { 
    iniciarAgendadores,
    lerLeads,
    salvarLeads
};